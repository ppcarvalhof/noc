# ----------------------------------------------------------------------
# Create utility labels labels
# ----------------------------------------------------------------------
# Copyright (C) 2007-2022 The NOC Project
# See LICENSE for details
# ----------------------------------------------------------------------

# Third-party modules
from pymongo import InsertOne, UpdateOne

# NOC modules
from noc.core.migration.base import BaseMigration


class Migration(BaseMigration):
    depends_on = [("vc", "0030_migrate_vc_vlan_filter")]

    def migrate(self):
        # Prefix Filter Labels
        # Create wildcard labels
        l_coll = self.mongo_db["labels"]
        vc_domains = {}
        for vid, name in self.db.execute("SELECT id, name FROM vc_vcfilter"):
            vc_domains[name] = vid
        bulk = [
            InsertOne(
                {
                    "name": "vlanfilter::*",
                    "description": "Wildcard label for VLANFilter match",
                    "bg_color1": 15844367,
                    "fg_color1": 16777215,
                    "bg_color2": 9323693,
                    "fg_color2": 16777215,
                    "is_protected": False,
                    "is_autogenerated": False,
                    "enable_interface": True,
                    "expose_alarm": False,
                }
            )
        ]
        vc_domains_labels = set()
        # VC Filter Labels
        ip_coll = self.mongo_db["noc.interface_profiles"]
        for ip in ip_coll.find({"match_rules": {"$ne": []}}, {"match_rules": 1}):
            match_rules = []
            for mr in ip.get("match_rules", []):
                nl = []
                for ll in mr["labels"]:
                    if ll.startswith("noc::vlanfilter::"):
                        _, _, vc_name, vc_scope, _ = ll.split("::", 4)
                        if vc_name in vc_domains:
                            nl += [f"vlanfilter::{vc_name}_{vc_scope}"]
                            vc_domains_labels.add((vc_name, vc_scope))
                            continue
                    nl += [ll]
                if nl != mr["labels"]:
                    match_rules += [{"dynamic_order": mr["dynamic_order"], "labels": nl}]
            if match_rules:
                bulk += [UpdateOne({"_id": ip["_id"]}, {"$set": {"match_rules": match_rules}})]
        for vc_name, vc_scope in vc_domains_labels:
            bulk += [
                InsertOne(
                    {
                        "name": f"vlanfilter::{vc_name}_{vc_scope}",
                        "bg_color1": 15844367,
                        "fg_color1": 16777215,
                        "bg_color2": 9323693,
                        "fg_color2": 16777215,
                        "display_order": 0,
                        "is_protected": False,
                        "is_autogenerated": False,
                        "is_matching": True,
                        "match_regex": [],
                        "match_vlanfilter": [
                            {
                                "vlan_filter": vc_domains[vc_name],
                                "condition": "any",
                                "scope": "subinterface_tagged_vlans"
                                if vc_scope == "tagged"
                                else "subinterface_untagged_vlan",
                            }
                        ],
                        "match_prefixfilter": [],
                    }
                )
            ]
        if bulk:
            l_coll.bulk_write(bulk, ordered=True)
        l_coll.remove({"name": {"$regex": ".+vcfilter.+"}})
